worker_processes auto;
rtmp_auto_push on;
events {
	multi_accept on;
	use epoll;
}
rtmp {
	server {
		listen 1935;
		listen [::]:1935 ipv6only=on;

		application live {
			live on;
			record off;
			exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 352x240
						-f flv rtmp://localhost:1935/small/${name} -s 480x360
						-f flv rtmp://localhost:1935/medium/${name} -s 858x480
						-f flv rtmp://localhost:1935/high/${name}
						-f flv rtmp://localhost:1935/original/${name};
		}
	}
}
http {

}

server {
	listen        80;
	server_name   lldragon.net *.lldragon.net;


	location /api {
		proxy_pass         http://localhost:5000;
		proxy_http_version 1.1;
		proxy_set_header   Upgrade $http_upgrade;
		proxy_set_header   Connection keep-alive;
		proxy_set_header   Host $host;
		proxy_cache_bypass $http_upgrade;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header   X-Forwarded-Proto $scheme;
	}

	server_tokens off;

	sendfile        on;
	tcp_nopush      on;

	tcp_nodelay     off;
# Enable Gzip compressed.
  gzip on;

  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  gzip_http_version  1.0;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
	application/atom+xml
	application/javascript
	application/json
	application/rss+xml
	application/vnd.ms-fontobject
	application/x-font-ttf
	application/x-web-app-manifest+json
	application/xhtml+xml
	application/xml
	font/opentype
	image/svg+xml
	image/x-icon
	text/css
	text/plain
	text/x-component;
  # text/html is always compressed by HttpGzipModule

	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	log_format compression '$remote_addr - $remote_user [$time_local] '
		'"$request" $status $upstream_addr '
		'"$http_referer" "$http_user_agent" "$gzip_ratio"';

	server {
		listen 8080;
		access_log /var/log/nginx/access.log compression;

		root /var/www;
		index index.html index.htm;

		# enable nginx metrics for the prometheus scraper
		location /nginx_status {
			stub_status on;
			access_log  off;
			allow all;  # REPLACE with your access policy
		}
		# enable proxy to local
		location /metrics {
			# use IP address for the backend and not "localhost" to ensure
			# connection is done over IPv4 (backend is configured as IPv4 only)
			proxy_pass http://127.0.0.1:9113;

			add_header Access-Control-Allow-Origin * always;
			#add_header Cache-Control "public, max-age=300";
			add_header Vary Accept;

			client_max_body_size 1m;
			client_body_buffer_size 1m;
			proxy_intercept_errors off;
			proxy_buffering on;
			proxy_buffer_size 16k;
			proxy_buffers 256 16k;
			proxy_busy_buffers_size 256k;
			proxy_temp_file_write_size 16k;
			proxy_max_temp_file_size 10m;
			proxy_read_timeout 300;

			limit_except GET OPTIONS {
				deny all;
			}

		}


		location ~* \.(?:manifest|appcache|html?|xml|json)$ {
			expires -1;
			# access_log logs/static.log; # I don't usually include a static log
		}

		location / {
			# First attempt to serve request as file, then
			# as directory, then fall back to redirecting to index.html
			try_files $uri $uri/ /index.html;
		}

		# Media: images, icons, video, audio, HTC
		location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
		  expires 1M;
		  access_log off;
		  add_header Cache-Control "public";
		}

		location ~* \.(?:css|js)$ {
			try_files $uri =404;
			expires 1y;
			access_log off;
			add_header Cache-Control "public";
		}

		# Any route containing a file extension (e.g. /devicesfile.js)
		location ~ ^.+\..+$ {
			try_files $uri =404;
		}

		location /static/ {
			root /var/www;
		}
	}
	}
}