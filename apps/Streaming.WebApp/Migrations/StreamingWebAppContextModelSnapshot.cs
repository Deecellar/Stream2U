// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streaming.WebApp.Data;

namespace Streaming.WebApp.Migrations
{
    [DbContext(typeof(StreamingWebAppContext))]
    partial class StreamingWebAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Streaming.WebApp.Models.Channel", b =>
                {
                    b.Property<int>("ChannelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChannelName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserOwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("ChannelID");

                    b.HasIndex("UserOwnerUserId");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("ChatID");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChatID")
                        .HasColumnType("int");

                    b.Property<int?>("ChatUserUserId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ChatMessageID");

                    b.HasIndex("ChatID");

                    b.HasIndex("ChatUserUserId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.Stream", b =>
                {
                    b.Property<int>("StreamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentViewership")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OwnerChannelID")
                        .HasColumnType("int");

                    b.Property<int?>("StreamChatChatID")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Viewer")
                        .HasColumnType("int");

                    b.HasKey("StreamID");

                    b.HasIndex("OwnerChannelID");

                    b.HasIndex("StreamChatChatID");

                    b.ToTable("Stream");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.Channel", b =>
                {
                    b.HasOne("Streaming.WebApp.Models.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerUserId");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.ChatMessage", b =>
                {
                    b.HasOne("Streaming.WebApp.Models.Chat", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatID");

                    b.HasOne("Streaming.WebApp.Models.User", "ChatUser")
                        .WithMany()
                        .HasForeignKey("ChatUserUserId");
                });

            modelBuilder.Entity("Streaming.WebApp.Models.Stream", b =>
                {
                    b.HasOne("Streaming.WebApp.Models.Channel", "Owner")
                        .WithMany("Streams")
                        .HasForeignKey("OwnerChannelID");

                    b.HasOne("Streaming.WebApp.Models.Chat", "StreamChat")
                        .WithMany()
                        .HasForeignKey("StreamChatChatID");
                });
#pragma warning restore 612, 618
        }
    }
}
